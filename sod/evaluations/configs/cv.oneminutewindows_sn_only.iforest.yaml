# configuration for training a classifier

# the input HDF5 file path
input: 'oneminutewindows_sn_only.hdf'

# The classifier. See `execute.EVALUATORS` for a list of possible strings
# mapped to a subclass of the base `Evaluator` class (defined in `evaluation.__init__`)
clf: "IsolationForest"

# The features (inout dataframe columns) to iterate over:
features:
  -
    - 'psd@0.2sec'
    - 'psd@0.5sec'
  -
    - 'psd@0.2sec'
    - 'psd@1sec'
  -
    - 'psd@0.2sec'
    - 'psd@2sec'
  -
    - 'psd@0.2sec'
    - 'psd@3sec'
  -
    - 'psd@0.2sec'
    - 'psd@5sec'
  -
    - 'psd@0.5sec'
    - 'psd@1sec'
  -
    - 'psd@0.5sec'
    - 'psd@2sec'
  -
    - 'psd@0.5sec'
    - 'psd@3sec'
  -
    - 'psd@0.5sec'
    - 'psd@5sec'
  -
    - 'psd@1sec'
    - 'psd@2sec'
  -
    - 'psd@1sec'
    - 'psd@3sec'
  -
    - 'psd@1sec'
    - 'psd@5sec'
  -
    - 'psd@2sec'
    - 'psd@3sec'
  -
    - 'psd@2sec'
    - 'psd@5sec'
  -
    - 'psd@3sec'
    - 'psd@5sec'
  -
    - 'psd@0.2sec'
    - 'psd@0.5sec'
    - 'psd@1sec'
  -
    - 'psd@0.2sec'
    - 'psd@0.5sec'
    - 'psd@2sec'
  -
    - 'psd@0.2sec'
    - 'psd@0.5sec'
    - 'psd@3sec'
  -
    - 'psd@0.2sec'
    - 'psd@0.5sec'
    - 'psd@5sec'
  -
    - 'psd@0.2sec'
    - 'psd@1sec'
    - 'psd@2sec'
  -
    - 'psd@0.2sec'
    - 'psd@1sec'
    - 'psd@3sec'
  -
    - 'psd@0.2sec'
    - 'psd@1sec'
    - 'psd@5sec'
  -
    - 'psd@0.2sec'
    - 'psd@2sec'
    - 'psd@3sec'
  -
    - 'psd@0.2sec'
    - 'psd@2sec'
    - 'psd@5sec'
  -
    - 'psd@0.2sec'
    - 'psd@3sec'
    - 'psd@5sec'
  -
    - 'psd@0.5sec'
    - 'psd@1sec'
    - 'psd@2sec'
  -
    - 'psd@0.5sec'
    - 'psd@1sec'
    - 'psd@3sec'
  -
    - 'psd@0.5sec'
    - 'psd@1sec'
    - 'psd@5sec'
  -
    - 'psd@0.5sec'
    - 'psd@2sec'
    - 'psd@3sec'
  -
    - 'psd@0.5sec'
    - 'psd@2sec'
    - 'psd@5sec'
  -
    - 'psd@0.5sec'
    - 'psd@3sec'
    - 'psd@5sec'
  -
    - 'psd@1sec'
    - 'psd@2sec'
    - 'psd@3sec'
  -
    - 'psd@1sec'
    - 'psd@2sec'
    - 'psd@5sec'
  -
    - 'psd@1sec'
    - 'psd@3sec'
    - 'psd@5sec'
  -
    - 'psd@2sec'
    - 'psd@3sec'
    - 'psd@5sec'
  -
    - 'psd@0.2sec'
    - 'psd@0.5sec'
    - 'psd@1sec'
    - 'psd@2sec'
  -
    - 'psd@0.2sec'
    - 'psd@0.5sec'
    - 'psd@1sec'
    - 'psd@3sec'
  -
    - 'psd@0.2sec'
    - 'psd@0.5sec'
    - 'psd@1sec'
    - 'psd@5sec'
  -
    - 'psd@0.2sec'
    - 'psd@0.5sec'
    - 'psd@2sec'
    - 'psd@3sec'
  -
    - 'psd@0.2sec'
    - 'psd@0.5sec'
    - 'psd@2sec'
    - 'psd@5sec'
  -
    - 'psd@0.2sec'
    - 'psd@0.5sec'
    - 'psd@3sec'
    - 'psd@5sec'
  -
    - 'psd@0.2sec'
    - 'psd@1sec'
    - 'psd@2sec'
    - 'psd@3sec'
  -
    - 'psd@0.2sec'
    - 'psd@1sec'
    - 'psd@2sec'
    - 'psd@5sec'
  -
    - 'psd@0.2sec'
    - 'psd@1sec'
    - 'psd@3sec'
    - 'psd@5sec'
  -
    - 'psd@0.2sec'
    - 'psd@2sec'
    - 'psd@3sec'
    - 'psd@5sec'
  -
    - 'psd@0.5sec'
    - 'psd@1sec'
    - 'psd@2sec'
    - 'psd@3sec'
  -
    - 'psd@0.5sec'
    - 'psd@1sec'
    - 'psd@2sec'
    - 'psd@5sec'
  -
    - 'psd@0.5sec'
    - 'psd@1sec'
    - 'psd@3sec'
    - 'psd@5sec'
  -
    - 'psd@0.5sec'
    - 'psd@2sec'
    - 'psd@3sec'
    - 'psd@5sec'
  -
    - 'psd@1sec'
    - 'psd@2sec'
    - 'psd@3sec'
    - 'psd@5sec'
  -
    - 'psd@0.2sec'
    - 'psd@0.5sec'
    - 'psd@1sec'
    - 'psd@2sec'
    - 'psd@3sec'
  -
    - 'psd@0.2sec'
    - 'psd@0.5sec'
    - 'psd@1sec'
    - 'psd@2sec'
    - 'psd@5sec'
  -
    - 'psd@0.2sec'
    - 'psd@0.5sec'
    - 'psd@1sec'
    - 'psd@3sec'
    - 'psd@5sec'
  -
    - 'psd@0.2sec'
    - 'psd@0.5sec'
    - 'psd@2sec'
    - 'psd@3sec'
    - 'psd@5sec'
  -
    - 'psd@0.2sec'
    - 'psd@1sec'
    - 'psd@2sec'
    - 'psd@3sec'
    - 'psd@5sec'
  -
    - 'psd@0.5sec'
    - 'psd@1sec'
    - 'psd@2sec'
    - 'psd@3sec'
    - 'psd@5sec'
  -
    - 'psd@0.2sec'
    - 'psd@0.5sec'
    - 'psd@1sec'
    - 'psd@2sec'
    - 'psd@3sec'
    - 'psd@5sec'

# The classifier parameters to iterate over:
parameters:
  n_estimators:
    - 100
    - 200
  max_samples:
    - 512
    - 2048
    - 8192
    - 16384
  contamination:
    - 0.05
    - 0.1

# if input has to be normalized before evaluation (normalize on good segments only):
input_normalize: false

# the output director root path. The output path will be constructed by
# appending the basename of the input file above to the root path:
# <output>/basename(<input>) (the directory will be created if non existing)
# Therein, for any combination of features and parameters three files will be stored:
# 1. An hdf file with all predictions (same length, in principle, of the input dataframe):
# - <clf>?features=<features>&params=<params>.evalpredictions.hdf
# 2. An HTML file with all confusion matrices (one per feature set, the scores of 
# all parameters combinations are stored in the html):
# - <clf>?features=<features>.evalreport.html
# The model (scikit dumped model) for the given features and parameters (using
# all instances in the set, which depends on the clf implementation, i.e.
# for OneClassSVM 'all instances' means good segments only. See `execute.EVALUATORS`
# for details):
# - <clf>?features=<features>&params=<params>.model